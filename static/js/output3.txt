// Array of possible characters
const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".split("");

// Function to get a random character
function getRandomChar() {
  return chars[Math.floor(Math.random() * chars.length)];
}

// Function to flip text before settling on the final letter
function flipToFinalLetter(span, finalLetter, duration = 2000) {
  let counter = 0;
  let maxFlips = Math.floor(duration / 100); // Number of random flips before stopping

  const interval = setInterval(() => {
    if (counter < maxFlips) {
      span.textContent = getRandomChar(); // Show random letters during flip
    } else {
      clearInterval(interval);
      span.textContent = finalLetter === " " ? "\u00A0" : finalLetter; // Ensure spaces are visible
      span.classList.remove("flipping"); // Remove animation class
    }
    counter++;
  }, 100); // Change every 100ms
}

// Function to start the flip animation
function startFlipAnimation(greeting) {
  const wrapper = document.getElementById("greeting-header-wrapper");
  wrapper.innerHTML = ""; // Clear existing spans

  // Create spans for each character, including spaces
  greeting.split("").forEach((char, index) => {
    const span = document.createElement("span");
    span.textContent = "\u00A0"
    wrapper.appendChild(span);

    const delay = index * 300; // Staggered start for a realistic effect
    setTimeout(() => {
      flipToFinalLetter(span, char);
    }, delay);
  });
}


document.addEventListener("DOMContentLoaded", () => {
  const completionButtons = document.querySelectorAll(".completion-circle");

  completionButtons.forEach((button) => {
    button.addEventListener("click", (event) => {
      event.preventDefault(); // Prevent default form submission

      const form = button.closest("form");
      const taskId = form.action.split("/").pop(); // Get the task ID from the form action

      fetch(`/toggle-completion/${taskId}`, {method: "POST"})
        .then((response) => {
          if (response.ok) {
            //toggle the completion circle
            const icon = button.querySelector("i");;
            icon.classList.toggle("fa-regular");
            icon.classList.toggle("fa-solid");
            icon.classList.toggle("fa-circle-check");

            //Apply strike-trough for completed tasks
            const taskInput = button.closest(".today-single-task-wrapper").querySelector("input[name='task']");
            taskInput.classList.toggle("task-completed");
          }
    })
    .catch((error) => console.error("Error:", error));
    });
  });


  // Select all priority wrappers
  const priorityWrappers = document.querySelectorAll(".custom-priority-wraper");

  priorityWrappers.forEach((wrapper) => {
    const button = wrapper.querySelector(".open-priority-menu"); // Get the button inside the wrapper
    const hiddenInput = wrapper.nextElementSibling; // Get the hidden input (assumes it's right after the wrapper)

    const prioritySelectMenu = document.createElement("ul");
    prioritySelectMenu.classList.add("hidden", "priority-options");

    const priorities = [
      {
        value: "high-priority",
        icon: '<i class="fa-solid fa-plane-circle-exclamation"></i>',
      },
      {
        value: "medium-priority",
        icon: '<i class="fa-solid fa-plane-departure"></i>',
      },
      {
        value: "low-priority",
        icon: '<i class="fa-solid fa-paper-plane"></i>',
      },
    ];

    priorities.forEach((priority) => {
      const option = document.createElement("li");
      option.innerHTML = priority.icon;
      option.dataset.value = priority.value;
      prioritySelectMenu.appendChild(option);

      option.addEventListener("click", () => {
        button.innerHTML = priority.icon;
        hiddenInput.value = priority.value;
        prioritySelectMenu.classList.add("hidden");
      });
    });

    wrapper.appendChild(prioritySelectMenu);

    button.addEventListener("click", () => {
      prioritySelectMenu.classList.toggle("hidden");
    });

    document.addEventListener("click", (event) => {
      if (!wrapper.contains(event.target)) {
        prioritySelectMenu.classList.add("hidden");
      }
    });
  });

  const addTodayTaskButton = document.getElementById("add-today-task-button");

  addTodayTaskButton.addEventListener("click", () => {
    const todayTasks = document.querySelector(".today-all-tasks-wrapper");
    const newTask = document.createElement("div");
    newTask.classList.add("today-single-task-wrapper");
    newTask.innerHTML = `<i class="fa-regular fa-circle completion-circle"></i>
                <form>
                  <input value="" />
                  <div class="custom-priority-wraper">
                    <button class="open-priority-menu" type="button">
                      <i class="fa-solid fa-paper-plane"></i>
                    </button>
                    <ul class="hidden priority-options">
                      <li data-value="high-priority"><i class="fa-solid fa-plane-circle-exclamation"></i></li>
                      <li data-value="medium-priority"><i class="fa-solid fa-plane-departure"></i></li>
                      <li data-value="low-priority"><i class="fa-solid fa-paper-plane"></i></li>
                    </ul>
                  </div>
                  <input type="hidden" name="priority" value="low-priority" />
                </form>`;

    todayTasks.appendChild(newTask);
    const newInput = newTask.querySelector('input[value=""]');
    newInput.focus();

    // Attach event listeners to the new elements
    const priorityButton = newTask.querySelector(".open-priority-menu");
    const priorityMenu = newTask.querySelector(".priority-options");
    const priorityOptions = newTask.querySelectorAll(".priority-options li");
    const hiddenInput = newTask.querySelector('input[type="hidden"]');

    // Toggle dropdown visibility
    priorityButton.addEventListener("click", () => {
      priorityMenu.classList.toggle("hidden");
    });

    // Handle option selection
    priorityOptions.forEach((option) => {
      option.addEventListener("click", () => {
        priorityButton.innerHTML = option.innerHTML; // Update button icon
        hiddenInput.value = option.dataset.value; // Update hidden input value
        priorityMenu.classList.add("hidden"); // Hide menu
      });
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", (event) => {
      if (!newTask.contains(event.target)) {
        priorityMenu.classList.add("hidden");
      }
    });

    const todayTaskCount = document.getElementById("total-task-count");
    todayTaskCount.innerText = todayTasks.children.length;
  });

  startFlipAnimation(formatGreeting("Ca'Sandra").toUpperCase())
});


function formatDate() {
  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];
  const today = new Date();
  const month = today.getMonth();
  const day = today.getDate();
  const year = today.getFullYear();

  return `${months[month]} ${day}, ${year}`;
}

function formatGreeting(name) {
  const hours = new Date().getHours();
  let greeting = "";

  if (hours <= 4 || hours >= 20) {
    greeting = "Good Night";
  } else if (hours >= 5 && hours <= 11) {
    greeting = "Good Morning";
  } else if (hours >= 12 && hours <= 16) {
    greeting = "Good Afternoon";
  } else {
    greeting = "Good Evening";
  }

  return `${greeting} ${name}`;
}
document.addEventListener('DOMContentLoaded', () => {
  const cloudLeft = document.querySelector('#cloud-left');
  const cloudRight = document.querySelector('#cloud-right');
  const penguinPlane = document.querySelector('.penguin-plane');
  
  window.addEventListener('scroll', () => {
    let value = window.scrollY;
    let scrollSpeed = 0.15;
    let penguinSpeed = 2;
    
    // Move left cloud leftward
    cloudLeft.style.transform = `translateX(${-value * scrollSpeed}px) translateY(-50%)`;
    
    // Move right cloud rightward
    cloudRight.style.transform = `translateX(${value * scrollSpeed}px) translateY(-50%)`;
    
    // Move plane image
    penguinPlane.style.transform = `translate(${-value * penguinSpeed}px, -50%)`;
    let penguinMovement = Math.min(value * penguinSpeed, maxScroll);

    // Bounds to limit movement
    if (value * scrollSpeed > 400) {
        value = 400 / scrollSpeed;
    }
  });
});


document.addEventListener("DOMContentLoaded", function () {
  let cloud1 = document.createElement("img");
  cloud1.src = "/static/images/cloud-gif.gif";
  cloud1.id = "cloud1";
  cloud1.classList.add("cloud");

  let lastMouseEntry = null;
  let mainDiv = document.getElementById("login-main-content"); // Cache element

  // Only run if login content exists
  if (mainDiv) {
    // Show the cloud when the mouse enters the screen
    document.addEventListener("mouseenter", function () {
      if (!document.body.contains(cloud1)) {
        document.body.appendChild(cloud1);
      }
    });

    document.addEventListener("mousemove", function (event) {
      if (!cloud1) return;
      let divRect = mainDiv.getBoundingClientRect();
      let cloudSize = 280;

      let newX = event.clientX + 10;
      let newY = event.clientY + 10;

      // Detect if the mouse enters the div from the left or right
      if (event.clientX < divRect.left) {
        lastMouseEntry = "left";
      } else if (event.clientX > divRect.right) {
        lastMouseEntry = "right";
      }

      // Stop at the left border if coming from the left
      if (
        lastMouseEntry === "left" &&
        newX + cloudSize > divRect.left &&
        newX < divRect.right
      ) {
        newX = divRect.left - cloudSize;
      }

      // Stop at the right border if coming from the right
      if (
        lastMouseEntry === "right" &&
        newX < divRect.right &&
        newX + cloudSize > divRect.left
      ) {
        newX = divRect.right;
      }

      cloud1.style.left = newX + "px";
      cloud1.style.top = newY + "px";
    });

    // Hide the cloud when the mouse leaves the screen
    document.addEventListener("mouseleave", function () {
      if (document.body.contains(cloud1)) {
        cloud1.remove();
      }
    });
  }

  // Password visibility toggle
  let passwordViewButton = document.querySelector(".eye-icon-button");
  let passwordInput = document.getElementById("password");
  let passwordHidden = true;

  if (passwordViewButton && passwordInput) {
    passwordViewButton.addEventListener("click", function () {
      let eyeIcon = passwordViewButton.firstElementChild;
      if (passwordHidden) {
        eyeIcon.classList.remove("fa-eye");
        eyeIcon.classList.add("fa-eye-slash");
        passwordInput.type = "text";
        passwordHidden = false;
      } else {
        eyeIcon.classList.remove("fa-eye-slash");
        eyeIcon.classList.add("fa-eye");
        passwordHidden = true;
        passwordInput.type = "password";
      }
    });
  }
});

document.addEventListener("DOMContentLoaded", function () {
  let cloud1 = document.createElement("img");
  cloud1.src = "/static/images/plane.gif";
  cloud1.id = "cloud1";
  cloud1.classList.add("cloud");

  let lastMouseEntry = null;

  // Show the cloud when the mouse enters the screen
  document.addEventListener("mouseenter", function () {
    document.body.appendChild(cloud1);
  });

  document.addEventListener("mousemove", function (event) {
    if (!cloud1) return;
    let mainDiv = document.getElementById("login-main-content");

    let divRect = mainDiv.getBoundingClientRect();
    let cloudSize = 300;

    let newX = event.clientX + 10;
    let newY = event.clientY + 10;

    if (event.clientX < divRect.left) {
      lastMouseEntry = "left";
      cloud1.style.transform = "scaleX(-1)"; // Flip vertically
    } else if (event.clientX > divRect.right) {
      lastMouseEntry = "right";
      cloud1.style.transform = "scaleX(1)"; // Reset to normal
    }

    // Stop at the left border if coming from the left
    if (
      lastMouseEntry === "left" &&
      newX + cloudSize > divRect.left &&
      newX < divRect.right
    ) {
      newX = divRect.left - cloudSize;
    }

    // Stop at the right border if coming from the right
    if (
      lastMouseEntry === "right" &&
      newX < divRect.right &&
      newX + cloudSize > divRect.left
    ) {
      newX = divRect.right; // Position just outside the right border
    }

    cloud1.style.left = newX + "px";
    cloud1.style.top = newY + "px";
  });

  // Hide the cloud when the mouse leaves the screen
  document.addEventListener("mouseleave", function () {
    cloud1.remove();
  });

  let passwordViewButton = document.querySelector(".eye-icon-button.password")
  let passwordInput = document.getElementById("password")
  let passwordHidden = true

  passwordViewButton.addEventListener("click", function () {
    passwordHidden = changePasswordFieldVisibility(passwordViewButton, passwordInput, passwordHidden)
  })

  let confirmPasswordViewButton = document.querySelector(".eye-icon-button.confirm")
  let confirmPasswordInput = document.getElementById("confirm-password")
  let confirmPasswordHidden = true

  confirmPasswordViewButton.addEventListener("click", function () {
    confirmPasswordHidden = changePasswordFieldVisibility(confirmPasswordViewButton, confirmPasswordInput, confirmPasswordHidden)
  })
});

function changePasswordFieldVisibility(passwordViewButton, passwordInput, isHidden) {
    let eyeIcon = passwordViewButton.firstElementChild
    if (isHidden) {
      eyeIcon.classList.remove("fa-eye")
      eyeIcon.classList.add("fa-eye-slash")
      passwordInput.type = "text"
      return false
    } else {
      eyeIcon.classList.remove("fa-eye-slash")
      eyeIcon.classList.add("fa-eye")
      passwordInput.type = "password"
      return true
    }
}