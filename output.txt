# Use an official Python runtime as a parent image
FROM python:3.11

# Set the working directory
WORKDIR /app

# Copy the project files into the container
COPY . .

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Expose the Flask port
EXPOSE 5000

# Set the entry point to run the Flask app
CMD ["python", "app.py"]
A Flask-based task manager with user authentication and task prioritization.

```sh
pip install -r requirements.txt
python app.py
```from flask import Flask, render_template, request, redirect, url_for, session, flash
from flask_pymongo import PyMongo
from bson.objectid import ObjectId
from werkzeug.security import generate_password_hash, check_password_hash
import os
import secrets
from dotenv import load_dotenv
from flask_mail import Mail, Message  # Install via `pip install Flask-Mail`

# Load environment variables
load_dotenv()

app = Flask(__name__)

# Set configurations
app.config["SECRET_KEY"] = os.getenv("SECRET_KEY", "your_default_secret_key")
app.config["MONGO_URI"] = os.getenv("MONGO_URI", "mongodb://localhost:27017/prioritypilotdev")

# Initialize MongoDB connection
mongo = PyMongo(app)

# Configure Flask-Mail for password reset emails
app.config["MAIL_SERVER"] = "smtp.example.com"  # Use a real SMTP server
app.config["MAIL_PORT"] = 587
app.config["MAIL_USE_TLS"] = True
app.config["MAIL_USERNAME"] = os.getenv("MAIL_USERNAME")
app.config["MAIL_PASSWORD"] = os.getenv("MAIL_PASSWORD")
mail = Mail(app)


@app.route('/')
def index():
    return render_template('index.html')


# Signup Route
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        first_name = request.form.get('first_name')
        last_name = request.form.get('last_name')
        confirm_password = request.form.get('confirm_password')
        email = request.form.get('email')

        if not (username and first_name and last_name and password and confirm_password and email):
            return render_template('register.html', message='All fields are required.')

        if password != confirm_password:  # Check if passwords match
            return render_template('register.html', message='Passwords do not match.')

        existing_user = mongo.db.users.find_one({'$or': [{'username': username}, {'email': email}]})
        if existing_user:
            return render_template('register.html', message='User already exists.')

        hashed_password = generate_password_hash(password, method="pbkdf2:sha256")


        user_data = {
            'username': username,
            'first_name': first_name,
            'last_name': last_name,
            'password': hashed_password,
            'email': email
        }
        mongo.db.users.insert_one(user_data)

        return redirect('/login')

    return render_template('register.html')


# Login Route (Allows Login with Either Username or Email)
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')

        user = mongo.db.users.find_one({'$or': [{'username': username}, {'email': username}]})

        if user and check_password_hash(user['password'], password):
            session['user_id'] = str(user['_id'])  # Store as string
            return redirect(url_for('/layout'))
        else:
            flash("invalid username or password", "error")
            return render_template('login.html', message='Invalid username or password')

    return render_template('login.html')


# Layout Route
@app.route('/layout')
def layout():
    if 'user_id' not in session:
        return redirect('/login')

    user = mongo.db.users.find_one({'_id': ObjectId(session['user_id'])})
    if not user:
        session.clear()
        return redirect('/login')

    tasks = list(mongo.db.tasks.find({'user_id': session['user_id']}))
    overdue_tasks = sum(1 for task in tasks if task.get('overdue', False))
    completed_tasks_today = sum(1 for task in tasks if task.get('completed_today', False))
    total_points = user.get('points', 0)
    streak_days = user.get('streak_days', 0)
    streak_weeks = user.get('streak_weeks', 0)
    achievements = user.get('achievements', [])

    return render_template(
        'temp-home.html',
        username=user['username'],
        tasks=tasks,
        overdue_tasks=overdue_tasks,
        completed_tasks_today=completed_tasks_today,
        total_points=total_points,
        streak_days=streak_days,
        streak_weeks=streak_weeks,
        achievements=achievements
    )

@app.route('/add-task', methods=['POST'])
def add_task():
    if 'user_id' not in session:
        return redirect('/login')

    task = request.form.get('task')
    priority = request.form.get('priority', 'normal')

    mongo.db.tasks.insert_one({
        'user_id': session['user_id'],
        'task': task,
        'priority': priority,
        'completed': False,
        'overdue': False
    })

    return redirect(url_for('/layout'))

@app.route('/update-task/<task_id>', methods=['POST'])
def update_task(task_id):
    if 'user_id' not in session:
        return redirect(url_for('/login'))

    updated_task = request.form.get('task')
    mongo.db.tasks.update_one(
        {'_id': ObjectId(task_id), 'user_id': session['user_id']},
        {'$set': {'task': updated_task}}
    )
    return redirect('/layout')

@app.route('/delete-task/<task_id>', methods=['POST'])
def delete_task(task_id):
    if 'user_id' not in session:
        return redirect('/login')

    mongo.db.tasks.delete_one({'_id': ObjectId(task_id), 'user_id': session['user_id']})
    return redirect('/layout')

@app.route('/toggle-completion/<task_id>', methods=['POST'])
def toggle_completion(task_id):
    if 'user_id' not in session:
        return redirect('/login')

    task = mongo.db.tasks.find_one({'_id': ObjectId(task_id), 'user_id': session['user_id']})
    if task:
        new_status = not task.get['completed', False]
        mongo.db.tasks.update_one({'_id': ObjectId(task_id)}, {'$set': {'completed': new_status}})
    
    return redirect('/layout')

# Logout Route
@app.route('/logout')
def logout():
    session.clear()
    return redirect('/')


# Forgot Password Route
@app.route('/forgot-password', methods=['GET', 'POST'])
def forgot_password():
    if request.method == 'POST':
        email = request.form.get('email')
        user = mongo.db.users.find_one({'email': email})

        if user:
            reset_token = secrets.token_urlsafe(32)
            mongo.db.users.update_one({'_id': user['_id']}, {'$set': {'reset_token': reset_token}})

            reset_url = url_for('reset_password', token=reset_token, _external=True)
            msg = Message("Password Reset Request", sender="noreply@example.com", recipients=[email])
            msg.body = f"Click the link to reset your password: {reset_url}"
            mail.send(msg)

            flash("Check your email for reset instructions.", "success")
            return redirect('/login')

    return render_template('forgot_password.html')


# Reset Password Route
@app.route('/reset-password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    user = mongo.db.users.find_one({'reset_token': token})

    if not user:
        return render_template('reset_password.html', message="Invalid or expired token.")

    if request.method == 'POST':
        new_password = request.form.get('password')
        hashed_password = generate_password_hash(new_password)
        mongo.db.users.update_one({'_id': user['_id']}, {'$set': {'password': hashed_password, 'reset_token': None}})
        return redirect('/login')

    return render_template('reset_password.html')

@app.route("/temp-home")
def temp_home():
    return render_template('temp-home.html')
    
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000, debug=True)

services:
  flask-app:
    build: .
    ports:
      - "5000:5000"
    depends_on:
      - mongo
    environment:
      - MONGO_URI=mongodb://mongo:27017/mydatabase
    volumes:
      - .:/app
    restart: always

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    restart: always

volumes:
  mongo-data:
from bson.objectid import ObjectId

class User:
    def __init__(self, name, email, username, password, _id=None):
        self.id = ObjectId(_id) if _id else None
        self.name = name  # New name field
        self.email = email
        self.username = username
        self.password = password  # Hash this in production!

    def to_dict(self):
        return {
            "_id": str(self.id) if self.id else None,
            "name": self.name,
            "email": self.email,
            "username": self.username,
            "password": self.password
        }

class Task:
    def __init__(self, name, priority_id, completed, description, due_date, task_type, user_id, _id=None):
        self.id = ObjectId(_id) if _id else None
        self.name = name
        self.priority_id = ObjectId(priority_id) if priority_id else None  # Foreign key reference
        self.completed = completed  # Boolean (True/False)
        self.description = description
        self.due_date = due_date  # Store as a string or convert to datetime
        self.task_type = task_type
        self.user_id = ObjectId(user_id) if user_id else None  # Foreign key reference to User

    def to_dict(self):
        return {
            "_id": str(self.id) if self.id else None,
            "name": self.name,
            "priority_id": str(self.priority_id) if self.priority_id else None,
            "completed": self.completed,
            "description": self.description,
            "due_date": self.due_date,
            "task_type": self.task_type,
            "user_id": str(self.user_id) if self.user_id else None
        }

class Priority:
    def __init__(self, name, point_value, rarity, _id=None):
        self.id = ObjectId(_id) if _id else None
        self.name = name
        self.point_value = point_value
        self.rarity = rarity

    def to_dict(self):
        return {
            "_id": str(self.id) if self.id else None,
            "name": self.name,
            "point_value": self.point_value,
            "rarity": self.rarity
        }
Flask
Flask-PyMongo
Werkzeug
python-dotenv
Flask-Mail
python-dotenvfrom db.users import seed_users
from db.priorities import seed_priorities
from db.tasks import seed_tasks

def seed_all():
    print("🚀 Seeding database...")
    seed_users()
    seed_priorities()
    seed_tasks()
    print("✅ Database seeding complete!")

if __name__ == "__main__":
    seed_all()
